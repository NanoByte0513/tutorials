# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Torch

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Model(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Model()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsModel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Model
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Model
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Model
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Torch.Parameters import Parameters
            obj = Parameters()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Model
    def Bias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Torch.Parameters import Parameters
            obj = Parameters()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ModelStart(builder):
    builder.StartObject(3)

def Start(builder):
    ModelStart(builder)

def ModelAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    ModelAddName(builder, name)

def ModelAddWeight(builder, weight):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(weight), 0)

def AddWeight(builder, weight):
    ModelAddWeight(builder, weight)

def ModelAddBias(builder, bias):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(bias), 0)

def AddBias(builder, bias):
    ModelAddBias(builder, bias)

def ModelEnd(builder):
    return builder.EndObject()

def End(builder):
    return ModelEnd(builder)
