# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Basketball

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Player(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Player()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPlayer(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Player
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Player
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Player
    def Nationality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Player
    def Age(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Player
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

    # Player
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from Basketball.Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Player
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Player
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Player
    def City(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Basketball.City import City
            obj = City()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Player
    def Retired(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Player
    def Salary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = o + self._tab.Pos
            from Basketball.Salary import Salary
            obj = Salary()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def PlayerStart(builder):
    builder.StartObject(10)

def Start(builder):
    PlayerStart(builder)

def PlayerAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    PlayerAddName(builder, name)

def PlayerAddNationality(builder, nationality):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nationality), 0)

def AddNationality(builder, nationality):
    PlayerAddNationality(builder, nationality)

def PlayerAddAge(builder, age):
    builder.PrependUint8Slot(2, age, 0)

def AddAge(builder, age):
    PlayerAddAge(builder, age)

def PlayerAddPosition(builder, position):
    builder.PrependInt8Slot(3, position, 1)

def AddPosition(builder, position):
    PlayerAddPosition(builder, position)

def PlayerAddPos(builder, pos):
    builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)

def AddPos(builder, pos):
    PlayerAddPos(builder, pos)

def PlayerAddHeight(builder, height):
    builder.PrependUint8Slot(5, height, 0)

def AddHeight(builder, height):
    PlayerAddHeight(builder, height)

def PlayerAddWeight(builder, weight):
    builder.PrependUint8Slot(6, weight, 0)

def AddWeight(builder, weight):
    PlayerAddWeight(builder, weight)

def PlayerAddCity(builder, city):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(city), 0)

def AddCity(builder, city):
    PlayerAddCity(builder, city)

def PlayerAddRetired(builder, retired):
    builder.PrependBoolSlot(8, retired, 0)

def AddRetired(builder, retired):
    PlayerAddRetired(builder, retired)

def PlayerAddSalary(builder, salary):
    builder.PrependStructSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(salary), 0)

def AddSalary(builder, salary):
    PlayerAddSalary(builder, salary)

def PlayerEnd(builder):
    return builder.EndObject()

def End(builder):
    return PlayerEnd(builder)
