// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TORCH_FBS_TORCH_H_
#define FLATBUFFERS_GENERATED_TORCH_FBS_TORCH_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fbs_torch {

struct Tensor;
struct TensorBuilder;

struct Parameters;
struct ParametersBuilder;

struct Model;
struct ModelBuilder;

struct Tensor FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TensorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHAPE = 4,
    VT_DATA = 6
  };
  const ::flatbuffers::Vector<int32_t> *shape() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_SHAPE);
  }
  const ::flatbuffers::Vector<float> *data() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SHAPE) &&
           verifier.VerifyVector(shape()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct TensorBuilder {
  typedef Tensor Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_shape(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> shape) {
    fbb_.AddOffset(Tensor::VT_SHAPE, shape);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<float>> data) {
    fbb_.AddOffset(Tensor::VT_DATA, data);
  }
  explicit TensorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Tensor> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Tensor>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Tensor> CreateTensor(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> shape = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> data = 0) {
  TensorBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_shape(shape);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Tensor> CreateTensorDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *shape = nullptr,
    const std::vector<float> *data = nullptr) {
  auto shape__ = shape ? _fbb.CreateVector<int32_t>(*shape) : 0;
  auto data__ = data ? _fbb.CreateVector<float>(*data) : 0;
  return fbs_torch::CreateTensor(
      _fbb,
      shape__,
      data__);
}

struct Parameters FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ParametersBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TENSOR = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const fbs_torch::Tensor *tensor() const {
    return GetPointer<const fbs_torch::Tensor *>(VT_TENSOR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffsetRequired(verifier, VT_TENSOR) &&
           verifier.VerifyTable(tensor()) &&
           verifier.EndTable();
  }
};

struct ParametersBuilder {
  typedef Parameters Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Parameters::VT_NAME, name);
  }
  void add_tensor(::flatbuffers::Offset<fbs_torch::Tensor> tensor) {
    fbb_.AddOffset(Parameters::VT_TENSOR, tensor);
  }
  explicit ParametersBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Parameters> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Parameters>(end);
    fbb_.Required(o, Parameters::VT_NAME);
    fbb_.Required(o, Parameters::VT_TENSOR);
    return o;
  }
};

inline ::flatbuffers::Offset<Parameters> CreateParameters(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<fbs_torch::Tensor> tensor = 0) {
  ParametersBuilder builder_(_fbb);
  builder_.add_tensor(tensor);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Parameters> CreateParametersDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    ::flatbuffers::Offset<fbs_torch::Tensor> tensor = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return fbs_torch::CreateParameters(
      _fbb,
      name__,
      tensor);
}

struct Model FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ModelBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_WEIGHT = 6,
    VT_BIAS = 8
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const fbs_torch::Parameters *weight() const {
    return GetPointer<const fbs_torch::Parameters *>(VT_WEIGHT);
  }
  const fbs_torch::Parameters *bias() const {
    return GetPointer<const fbs_torch::Parameters *>(VT_BIAS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffsetRequired(verifier, VT_WEIGHT) &&
           verifier.VerifyTable(weight()) &&
           VerifyOffsetRequired(verifier, VT_BIAS) &&
           verifier.VerifyTable(bias()) &&
           verifier.EndTable();
  }
};

struct ModelBuilder {
  typedef Model Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Model::VT_NAME, name);
  }
  void add_weight(::flatbuffers::Offset<fbs_torch::Parameters> weight) {
    fbb_.AddOffset(Model::VT_WEIGHT, weight);
  }
  void add_bias(::flatbuffers::Offset<fbs_torch::Parameters> bias) {
    fbb_.AddOffset(Model::VT_BIAS, bias);
  }
  explicit ModelBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Model> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Model>(end);
    fbb_.Required(o, Model::VT_NAME);
    fbb_.Required(o, Model::VT_WEIGHT);
    fbb_.Required(o, Model::VT_BIAS);
    return o;
  }
};

inline ::flatbuffers::Offset<Model> CreateModel(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<fbs_torch::Parameters> weight = 0,
    ::flatbuffers::Offset<fbs_torch::Parameters> bias = 0) {
  ModelBuilder builder_(_fbb);
  builder_.add_bias(bias);
  builder_.add_weight(weight);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Model> CreateModelDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    ::flatbuffers::Offset<fbs_torch::Parameters> weight = 0,
    ::flatbuffers::Offset<fbs_torch::Parameters> bias = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return fbs_torch::CreateModel(
      _fbb,
      name__,
      weight,
      bias);
}

inline const fbs_torch::Model *GetModel(const void *buf) {
  return ::flatbuffers::GetRoot<fbs_torch::Model>(buf);
}

inline const fbs_torch::Model *GetSizePrefixedModel(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fbs_torch::Model>(buf);
}

inline bool VerifyModelBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbs_torch::Model>(nullptr);
}

inline bool VerifySizePrefixedModelBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbs_torch::Model>(nullptr);
}

inline void FinishModelBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fbs_torch::Model> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedModelBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fbs_torch::Model> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs_torch

#endif  // FLATBUFFERS_GENERATED_TORCH_FBS_TORCH_H_
