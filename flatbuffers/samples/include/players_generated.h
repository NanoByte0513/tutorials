// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYERS_BASKETBALL_H_
#define FLATBUFFERS_GENERATED_PLAYERS_BASKETBALL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace Basketball {

struct Vec3;

struct Salary;

struct Player;
struct PlayerBuilder;

struct City;
struct CityBuilder;

enum Position : int8_t {
  Position_PG = 0,
  Position_SG = 1,
  Position_SF = 2,
  Position_PF = 3,
  Position_C = 4,
  Position_MIN = Position_PG,
  Position_MAX = Position_C
};

inline const Position (&EnumValuesPosition())[5] {
  static const Position values[] = {
    Position_PG,
    Position_SG,
    Position_SF,
    Position_PF,
    Position_C
  };
  return values;
}

inline const char * const *EnumNamesPosition() {
  static const char * const names[6] = {
    "PG",
    "SG",
    "SF",
    "PF",
    "C",
    nullptr
  };
  return names;
}

inline const char *EnumNamePosition(Position e) {
  if (::flatbuffers::IsOutRange(e, Position_PG, Position_C)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPosition()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Salary FLATBUFFERS_FINAL_CLASS {
 private:
  float sal_[5];

 public:
  Salary()
      : sal_() {
  }
  Salary(::flatbuffers::span<const float, 5> _sal) {
    ::flatbuffers::CastToArray(sal_).CopyFromSpan(_sal);
  }
  const ::flatbuffers::Array<float, 5> *sal() const {
    return &::flatbuffers::CastToArray(sal_);
  }
};
FLATBUFFERS_STRUCT_END(Salary, 20);

struct Player FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_NATIONALITY = 6,
    VT_AGE = 8,
    VT_POSITION = 10,
    VT_POS = 12,
    VT_HEIGHT = 14,
    VT_WEIGHT = 16,
    VT_CITY = 18,
    VT_RETIRED = 20,
    VT_SALARY = 22
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *nationality() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NATIONALITY);
  }
  uint8_t age() const {
    return GetField<uint8_t>(VT_AGE, 0);
  }
  Basketball::Position position() const {
    return static_cast<Basketball::Position>(GetField<int8_t>(VT_POSITION, 1));
  }
  const Basketball::Vec3 *pos() const {
    return GetStruct<const Basketball::Vec3 *>(VT_POS);
  }
  uint8_t height() const {
    return GetField<uint8_t>(VT_HEIGHT, 0);
  }
  uint8_t weight() const {
    return GetField<uint8_t>(VT_WEIGHT, 0);
  }
  const Basketball::City *city() const {
    return GetPointer<const Basketball::City *>(VT_CITY);
  }
  bool retired() const {
    return GetField<uint8_t>(VT_RETIRED, 0) != 0;
  }
  const Basketball::Salary *salary() const {
    return GetStruct<const Basketball::Salary *>(VT_SALARY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_NATIONALITY) &&
           verifier.VerifyString(nationality()) &&
           VerifyField<uint8_t>(verifier, VT_AGE, 1) &&
           VerifyField<int8_t>(verifier, VT_POSITION, 1) &&
           VerifyField<Basketball::Vec3>(verifier, VT_POS, 4) &&
           VerifyField<uint8_t>(verifier, VT_HEIGHT, 1) &&
           VerifyField<uint8_t>(verifier, VT_WEIGHT, 1) &&
           VerifyOffset(verifier, VT_CITY) &&
           verifier.VerifyTable(city()) &&
           VerifyField<uint8_t>(verifier, VT_RETIRED, 1) &&
           VerifyField<Basketball::Salary>(verifier, VT_SALARY, 4) &&
           verifier.EndTable();
  }
};

struct PlayerBuilder {
  typedef Player Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Player::VT_NAME, name);
  }
  void add_nationality(::flatbuffers::Offset<::flatbuffers::String> nationality) {
    fbb_.AddOffset(Player::VT_NATIONALITY, nationality);
  }
  void add_age(uint8_t age) {
    fbb_.AddElement<uint8_t>(Player::VT_AGE, age, 0);
  }
  void add_position(Basketball::Position position) {
    fbb_.AddElement<int8_t>(Player::VT_POSITION, static_cast<int8_t>(position), 1);
  }
  void add_pos(const Basketball::Vec3 *pos) {
    fbb_.AddStruct(Player::VT_POS, pos);
  }
  void add_height(uint8_t height) {
    fbb_.AddElement<uint8_t>(Player::VT_HEIGHT, height, 0);
  }
  void add_weight(uint8_t weight) {
    fbb_.AddElement<uint8_t>(Player::VT_WEIGHT, weight, 0);
  }
  void add_city(::flatbuffers::Offset<Basketball::City> city) {
    fbb_.AddOffset(Player::VT_CITY, city);
  }
  void add_retired(bool retired) {
    fbb_.AddElement<uint8_t>(Player::VT_RETIRED, static_cast<uint8_t>(retired), 0);
  }
  void add_salary(const Basketball::Salary *salary) {
    fbb_.AddStruct(Player::VT_SALARY, salary);
  }
  explicit PlayerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Player> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Player>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Player> CreatePlayer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> nationality = 0,
    uint8_t age = 0,
    Basketball::Position position = Basketball::Position_SG,
    const Basketball::Vec3 *pos = nullptr,
    uint8_t height = 0,
    uint8_t weight = 0,
    ::flatbuffers::Offset<Basketball::City> city = 0,
    bool retired = false,
    const Basketball::Salary *salary = nullptr) {
  PlayerBuilder builder_(_fbb);
  builder_.add_salary(salary);
  builder_.add_city(city);
  builder_.add_pos(pos);
  builder_.add_nationality(nationality);
  builder_.add_name(name);
  builder_.add_retired(retired);
  builder_.add_weight(weight);
  builder_.add_height(height);
  builder_.add_position(position);
  builder_.add_age(age);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Player> CreatePlayerDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *nationality = nullptr,
    uint8_t age = 0,
    Basketball::Position position = Basketball::Position_SG,
    const Basketball::Vec3 *pos = nullptr,
    uint8_t height = 0,
    uint8_t weight = 0,
    ::flatbuffers::Offset<Basketball::City> city = 0,
    bool retired = false,
    const Basketball::Salary *salary = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto nationality__ = nationality ? _fbb.CreateString(nationality) : 0;
  return Basketball::CreatePlayer(
      _fbb,
      name__,
      nationality__,
      age,
      position,
      pos,
      height,
      weight,
      city,
      retired,
      salary);
}

struct City FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CityBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ZIP_CODE = 6,
    VT_POPULATION = 8
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *zip_code() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ZIP_CODE);
  }
  float population() const {
    return GetField<float>(VT_POPULATION, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ZIP_CODE) &&
           verifier.VerifyString(zip_code()) &&
           VerifyField<float>(verifier, VT_POPULATION, 4) &&
           verifier.EndTable();
  }
};

struct CityBuilder {
  typedef City Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(City::VT_NAME, name);
  }
  void add_zip_code(::flatbuffers::Offset<::flatbuffers::String> zip_code) {
    fbb_.AddOffset(City::VT_ZIP_CODE, zip_code);
  }
  void add_population(float population) {
    fbb_.AddElement<float>(City::VT_POPULATION, population, 0.0f);
  }
  explicit CityBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<City> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<City>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<City> CreateCity(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> zip_code = 0,
    float population = 0.0f) {
  CityBuilder builder_(_fbb);
  builder_.add_population(population);
  builder_.add_zip_code(zip_code);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<City> CreateCityDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *zip_code = nullptr,
    float population = 0.0f) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto zip_code__ = zip_code ? _fbb.CreateString(zip_code) : 0;
  return Basketball::CreateCity(
      _fbb,
      name__,
      zip_code__,
      population);
}

inline const Basketball::Player *GetPlayer(const void *buf) {
  return ::flatbuffers::GetRoot<Basketball::Player>(buf);
}

inline const Basketball::Player *GetSizePrefixedPlayer(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Basketball::Player>(buf);
}

inline bool VerifyPlayerBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Basketball::Player>(nullptr);
}

inline bool VerifySizePrefixedPlayerBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Basketball::Player>(nullptr);
}

inline void FinishPlayerBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Basketball::Player> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlayerBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Basketball::Player> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Basketball

#endif  // FLATBUFFERS_GENERATED_PLAYERS_BASKETBALL_H_
